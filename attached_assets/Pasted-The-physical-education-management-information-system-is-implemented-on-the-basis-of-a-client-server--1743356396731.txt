The physical education management information system is implemented on the basis of a client-server architecture using modern web technologies. The system supports modularity, scalability, and separation of tasks, providing adaptability to different user roles (administrator, teacher, student).
1. Data layer architecture The data
model is defined in shared/schema.ts and serves as a single source of truth for the client and server parts. Basic entities:
 User – contains credentials, personal information, and role properties.
 Faculty – logically groups students.
, A group that connects students with faculties.
 Physical tests and Samples – store the results, grades, and test parameters.
Data access is abstracted through the iStorage interface (server/storage.ts), which ensures: independence from storage mechanisms (memory, relational databases), standardized CRUD operations, isolation of business logic from storage details.
2. Server architecture
It is built according to a multi-level scheme:
 API (routes.ts) – RESTful endpoints for interacting with the client.
 Authentication (auth.ts) – session management via Passport.js, role-based access control.
 The service layer includes business logic, validation, and cross-object operations.
 The data access layer is an abstraction of working with storage.
3. Client architecture
It is based on the component approach (React) and includes:
 The hierarchy of components: layouts, pages, forms, UI elements (Shadcn UI).
 State management: TanStack Query – for synchronization with the server; React Hook Form + Zod – form validation; useState – local state of components.
 Routing: Wouter with role protection and nested pages.
 Security: secure sessions, password hashing, CSRF protection.
 Error handling: uniform response format, logging on the server.
4. Key architectural patterns:
 iStorage – abstraction of data access, support for replacement of implementations.
 MVC (Model-View-Controller) – models in schema.ts, views in React, controllers in routes.ts.
 Dependency injection – transferring storage to handlers, React contexts.
 Facade – the API layer as a unified interface for complex subsystems.
5. Interaction of components
 Client-server: RESTful API with JSON, Zod validation, cookie authentication.
 Inter-client: prop transfer, Context API, custom hooks.
 Data flow: unidirectional (UI → API → server → status → redrawing).
6. Deployment and adaptability
 The client is built via Vite, the server is on Node.js .
 Support for monolithic and separate deployment.
 Flexibility for expansion: Switching from in-memory to PostgreSQL; Adding new roles and entity fields.
7. Compromises
 CSR vs. SSR: The client rendering is selected for interactivity.
 Monolith vs. Microservices: the current implementation simplifies support.
 Sessions vs. JWT: a standard approach for compatibility.